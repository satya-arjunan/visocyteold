#[==[.md
# visocyte-config.cmake

This file is used by CMake when finding ParaView.

The following variables are provided by this module:

  * `ParaView_VERSION`: The version of ParaView found.
  * `VISOCYTE_BUILD_QT_GUI`: If ParaView's Qt GUI is available.
  * `VISOCYTE_USE_MPI`: If ParaView is built with MPI support.
  * `VISOCYTE_ENABLE_PYTHON`: If ParaView is built with Python support.
  * `VISOCYTE_PYTHONPATH`: Where ParaView's Python modules live. Unset if
    Python is not available.
  * `VISOCYTE_PLUGIN_SUBDIR`: The subdirectory under the library directory for
    plugins.
  * `ParaView_LIBRARIES`: The list of modules specified by `COMPONENTS` and
    `OPTIONAL_COMPONENTS`. This may be used in `MODULES` arguments in the API
    (e.g., `vtk_module_autoinit`). All modules are also targets and may be
    linked to using `target_link_libraries`.
#]==]

set(${CMAKE_FIND_PACKAGE_NAME}_CMAKE_MODULE_PATH_save "${CMAKE_MODULE_PATH}")
list(INSERT CMAKE_MODULE_PATH 0
  "${CMAKE_CURRENT_LIST_DIR}")

set("${CMAKE_FIND_PACKAGE_NAME}_VERSION" "@VISOCYTE_VERSION_FULL@")

unset("${CMAKE_FIND_PACKAGE_NAME}_FOUND")

set(_visocyte_use_external_vtk "@VISOCYTE_USE_EXTERNAL_VTK@")
set(_visocyte_find_package_args)
if (NOT _visocyte_use_external_vtk)
  list(APPEND _visocyte_find_package_args
    PATHS "${CMAKE_CURRENT_LIST_DIR}/vtk"
    NO_DEFAULT_PATH)
endif ()
if (${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY)
  list(APPEND _visocyte_find_package_args
    QUIET)
endif ()
find_package(VTK REQUIRED
  ${_visocyte_find_package_args})
if (NOT VTK_FOUND)
  set("${CMAKE_FIND_PACKAGE_NAME}_FOUND" 0)
endif ()
unset(_visocyte_find_package_args)
unset(_visocyte_use_external_vtk)

include("${CMAKE_CURRENT_LIST_DIR}/${CMAKE_FIND_PACKAGE_NAME}-targets.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/${CMAKE_FIND_PACKAGE_NAME}-vtk-module-properties.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/${CMAKE_FIND_PACKAGE_NAME}-vtk-module-find-packages.cmake")

include("${CMAKE_CURRENT_LIST_DIR}/ParaViewClient.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/ParaViewPlugin.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/ParaViewServerManager.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/vtkModuleWrapClientServer.cmake")

set(VISOCYTE_BUILD_QT_GUI "@VISOCYTE_BUILD_QT_GUI@")
set(VISOCYTE_USE_MPI "@VISOCYTE_USE_MPI@")
set(VISOCYTE_ENABLE_PYTHON "@VISOCYTE_ENABLE_PYTHON@")
set(VISOCYTE_PLUGIN_SUBDIR "visocyte-@VISOCYTE_VERSION_MAJOR@.@VISOCYTE_VERSION_MINOR@/plugins")

set(_visocyte_components_to_check)
foreach (_visocyte_component IN LISTS "${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS")
  if (DEFINED "${CMAKE_FIND_PACKAGE_NAME}_${_visocyte_component}_FOUND")
    # It was already not-found (likely due to `find-package` failures).
  elseif (TARGET "${CMAKE_FIND_PACKAGE_NAME}::${_visocyte_component}")
    list(APPEND _visocyte_components_to_check
      "${_visocyte_component}")
  else ()
    set("${CMAKE_FIND_PACKAGE_NAME}_${_visocyte_component}_FOUND" 0)
    list(APPEND "${CMAKE_FIND_PACKAGE_NAME}_${_visocyte_component}_NOT_FOUND_MESSAGE"
      "The ${_visocyte_component} component is not available.")
  endif ()
endforeach ()
unset(_visocyte_component)

set(_visocyte_vtk_components)

while (_visocyte_components_to_check)
  list(GET _visocyte_components_to_check 0 _visocyte_component)
  list(REMOVE_AT _visocyte_components_to_check 0)
  if (DEFINED "${CMAKE_FIND_PACKAGE_NAME}_${_visocyte_component}_FOUND")
    # We've already made a determiniation.
    continue ()
  endif ()

  get_property(_visocyte_dependencies
    TARGET    "${CMAKE_FIND_PACKAGE_NAME}::${_visocyte_component}"
    PROPERTY  "INTERFACE_visocyte_module_depends")
  string(REPLACE "${CMAKE_FIND_PACKAGE_NAME}::" "" _visocyte_dependencies "${_visocyte_dependencies}")
  set(_visocyte_all_dependencies_checked TRUE)
  foreach (_visocyte_dependency IN LISTS _visocyte_dependencies)
    # Handle VTK module dependencies.
    string(FIND "${_visocyte_component}" "VTK::" _visocyte_vtk_idx)
    if (NOT _visocyte_vtk_idx EQUAL -1)
      unset(_visocyte_vtk_idx)
      if (NOT TARGET "${_visocyte_dependency}")
        set("${CMAKE_FIND_PACKAGE_NAME}_${_visocyte_component}_FOUND" 0)
        list(APPEND "${CMAKE_FIND_PACKAGE_NAME}_${_visocyte_component}_NOT_FOUND_MESSAGE"
          "Failed to find the ${_visocyte_dependency} module.")
      endif ()
      continue ()
    endif ()
    unset(_visocyte_vtk_idx)

    if (DEFINED "${CMAKE_FIND_PACKAGE_NAME}_${_visocyte_dependency}_FOUND")
      if (NOT ${CMAKE_FIND_PACKAGE_NAME}_${_visocyte_dependency}_FOUND)
        set("${CMAKE_FIND_PACKAGE_NAME}_${_visocyte_component}_FOUND" 0)
        list(APPEND "${CMAKE_FIND_PACKAGE_NAME}_${_visocyte_component}_NOT_FOUND_MESSAGE"
          "Failed to find the ${_visocyte_dependency} component.")
      endif ()
    else ()
      # Check its dependencies.
      list(APPEND _visocyte_components_to_check
        "${_visocyte_dependency}")
      set(_visocyte_all_found FALSE)
    endif ()
  endforeach ()
  if (NOT DEFINED "${CMAKE_FIND_PACKAGE_NAME}_${_visocyte_component}_FOUND")
    if (_visocyte_all_dependencies_checked)
      set("${CMAKE_FIND_PACKAGE_NAME}_${_visocyte_component}_FOUND" 1)
    else ()
      list(APPEND _visocyte_components_to_check
        "${_visocyte_component}")
    endif ()
  endif ()
  unset(_visocyte_all_dependencies_checked)
  unset(_visocyte_dependency)
  unset(_visocyte_dependencies)
endwhile ()
unset(_visocyte_component)
unset(_visocyte_components_to_check)

set(_visocyte_missing_components)
foreach (_visocyte_component IN LISTS "${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS")
  if (NOT ${CMAKE_FIND_PACKAGE_NAME}_${_visocyte_component}_FOUND AND ${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED_${_visocyte_component})
    list(APPEND _visocyte_missing_components
      "${_visocyte_component}")
  endif ()
endforeach ()

if (_visocyte_missing_components)
  list(REMOVE_DUPLICATES _visocyte_missing_components)
  list(SORT _visocyte_missing_components)
  string(REPLACE ";" ", " _visocyte_missing_components "${_visocyte_missing_components}")
  set("${CMAKE_FIND_PACKAGE_NAME}_FOUND" 0)
  set("${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE"
    "Could not find the ${CMAKE_FIND_PACKAGE_NAME} package with the following required components: ${_visocyte_missing_components}.")
endif ()
unset(_visocyte_missing_components)

set("${CMAKE_FIND_PACKAGE_NAME}_LIBRARIES")
if (NOT DEFINED "${CMAKE_FIND_PACKAGE_NAME}_FOUND")
  # If nothing went wrong, we've successfully found the package.
  set("${CMAKE_FIND_PACKAGE_NAME}_FOUND" 1)
  # Build the `_LIBRARIES` variable.
  foreach (_visocyte_component IN LISTS "${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS")
    list(APPEND "${CMAKE_FIND_PACKAGE_NAME}_LIBRARIES"
      "${CMAKE_FIND_PACKAGE_NAME}::${_visocyte_component}")
  endforeach ()
  unset(_visocyte_component)
endif ()

set(CMAKE_MODULE_PATH "${${CMAKE_FIND_PACKAGE_NAME}_CMAKE_MODULE_PATH_save}")
unset(${CMAKE_FIND_PACKAGE_NAME}_CMAKE_MODULE_PATH_save)
